# -*- coding: utf-8 -*-
"""TP 1 last.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1wDB_nv8jJIEj144zI2OTWBwrRUScAttF

# 1 TP1
"""

import yfinance as yf
import pandas as pd
import zipfile

"""# 1.1 Scrapping Ratios financiers

Objectif: Pour chaque ratio, récupérer les données de chaque compagnie dans une liste. Créer un fichier csv à partir du dataframe finalement obtenu.

1. Créer le dictionnaire ”ratios” : Clés = Nom de ratios, Valeurs = Liste vide.
"""

companies = {
    "Apple": "AAPL",
    "Microsoft": "MSFT",
    "Amazon": "AMZN",
    "Alphabet": "GOOGL",
    "Meta": "META",
    "Tesla": "TSLA",
    "NVIDIA": "NVDA",
    "Samsung": "005930.KS",
    "Tencent": "TCEHY",
    "Alibaba": "BABA",
    "IBM": "IBM",
    "Intel": "INTC",
    "Oracle": "ORCL",
    "Sony": "SONY",
    "Adobe": "ADBE",
    "Netflix": "NFLX",
    "AMD": "AMD",
    "Qualcomm": "QCOM",
    "Cisco": "CSCO",
    "JP Morgan": "JPM",
    "Goldman Sachs": "GS",
    "Visa": "V",
    "Johnson & Johnson": "JNJ",
    "Pfizer": "PFE",
    "ExxonMobil": "XOM",
    "ASML": "ASML.AS",
    "SAP": "SAP.DE",
    "Siemens": "SIE.DE",
    "Louis Vuitton (LVMH)": "MC.PA",
    "TotalEnergies": "TTE.PA",
    "Shell": "SHEL.L",
    "Baidu": "BIDU",
    "JD.com": "JD",
    "BYD": "BYDDY",
    "ICBC": "1398.HK",
    "Toyota": "TM",
    "SoftBank": "9984.T",
    "Nintendo": "NTDOY",
    "Hyundai": "HYMTF",
    "Reliance Industries": "RELIANCE.NS",
    "Tata Consultancy Services": "TCS.NS"
}

ratios = {
"forwardPE": [],
"beta": [],
"priceToBook": [],
"priceToSales": [],
"dividendYield": [],
"trailingEps": [],
"debtToEquity": [],
"currentRatio": [],
"quickRatio": [],
"returnOnEquity": [],
"returnOnAssets": [],
"operatingMargins": [],
"profitMargins": []
}

"""2. Récupérer les ratios de chaque compagnie et les stocker dans les listes correspondantes."""

for companie,symb in companies.items():
    for ratio in ratios:
        ticker = yf.Ticker(symb)
        ratios[ratio].append(ticker.info.get(ratio))

"""3. Convertir le dictionnaire en dataframe avec le nom de la Company en index. Exporter en format csv."""

ratios_df = pd.DataFrame(ratios,index=companies.keys()) #dataframe
ratios_df.to_csv("ratios.csv")

"""# 1.2 Scrapping variations des stocks

Objectif: Pour chaque entreprise, récupérer cinq an d’historique de variation des stocks. Exporter dans un csv par entreprise.

1. Récupérer les données ’Close’ de chaque jour dans un dataframe.
"""

Close_dict = {}

for companie,symb in companies.items():
    Close_dict[symb] = pd.DataFrame()
    Close_dict[symb]["Close"]= yf.download(symb, period = '5y', progress = False)["Close"]

"""2. Créer une colonne ’Next Day Close’ (avec la commande shift)."""

for companie,symb in companies.items():
    Close_dict[symb]["NextDayClose"] = Close_dict[symb]["Close"].shift(-1)

"""3. Créer une colonne ’Rendement’ qui calcule les variations de stocks d’un jour à l’autre."""

for companie,symb in companies.items():
    Close_dict[symb]["Rendement"] = (Close_dict[symb]["NextDayClose"] - Close_dict[symb]["Close"])/Close_dict[symb]["Close"]

"""4. Exporter en format csv (mettre tous les csv dans un même fichier ”Companies historical data”."""

with zipfile.ZipFile("Companies_historical_data.zip", "w") as zipf:
    for companie,symb in companies.items():
        Close_dict[symb].to_csv(symb)
        zipf.write(symb)  #add csv to the zip file